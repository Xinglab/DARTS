// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// dnorm_cpp
double dnorm_cpp(double x, double mean, double sd);
RcppExport SEXP Darts_dnorm_cpp(SEXP xSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(dnorm_cpp(x, mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// rdarts_post_pr_cpp
double rdarts_post_pr_cpp(NumericVector par, NumericMatrix data, double tau, double sigma, bool is_paired, double inc_eff_len, double skp_eff_len);
RcppExport SEXP Darts_rdarts_post_pr_cpp(SEXP parSEXP, SEXP dataSEXP, SEXP tauSEXP, SEXP sigmaSEXP, SEXP is_pairedSEXP, SEXP inc_eff_lenSEXP, SEXP skp_eff_lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type is_paired(is_pairedSEXP);
    Rcpp::traits::input_parameter< double >::type inc_eff_len(inc_eff_lenSEXP);
    Rcpp::traits::input_parameter< double >::type skp_eff_len(skp_eff_lenSEXP);
    rcpp_result_gen = Rcpp::wrap(rdarts_post_pr_cpp(par, data, tau, sigma, is_paired, inc_eff_len, skp_eff_len));
    return rcpp_result_gen;
END_RCPP
}
// rdarts_posterior_MCMC_sampler
NumericMatrix rdarts_posterior_MCMC_sampler(int N, double tau, double sigma, NumericMatrix data, NumericVector init_val, double proposal_width, int burnin, int thinning, int random_state, bool is_paired, double inc_eff_len, double skp_eff_len);
RcppExport SEXP Darts_rdarts_posterior_MCMC_sampler(SEXP NSEXP, SEXP tauSEXP, SEXP sigmaSEXP, SEXP dataSEXP, SEXP init_valSEXP, SEXP proposal_widthSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP random_stateSEXP, SEXP is_pairedSEXP, SEXP inc_eff_lenSEXP, SEXP skp_eff_lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type init_val(init_valSEXP);
    Rcpp::traits::input_parameter< double >::type proposal_width(proposal_widthSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< int >::type random_state(random_stateSEXP);
    Rcpp::traits::input_parameter< bool >::type is_paired(is_pairedSEXP);
    Rcpp::traits::input_parameter< double >::type inc_eff_len(inc_eff_lenSEXP);
    Rcpp::traits::input_parameter< double >::type skp_eff_len(skp_eff_lenSEXP);
    rcpp_result_gen = Rcpp::wrap(rdarts_posterior_MCMC_sampler(N, tau, sigma, data, init_val, proposal_width, burnin, thinning, random_state, is_paired, inc_eff_len, skp_eff_len));
    return rcpp_result_gen;
END_RCPP
}
// darts_likelihood_cpp
double darts_likelihood_cpp(double mu, double delta, List data, bool loglik, double inc_eff_len, double skp_eff_len);
RcppExport SEXP Darts_darts_likelihood_cpp(SEXP muSEXP, SEXP deltaSEXP, SEXP dataSEXP, SEXP loglikSEXP, SEXP inc_eff_lenSEXP, SEXP skp_eff_lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< bool >::type loglik(loglikSEXP);
    Rcpp::traits::input_parameter< double >::type inc_eff_len(inc_eff_lenSEXP);
    Rcpp::traits::input_parameter< double >::type skp_eff_len(skp_eff_lenSEXP);
    rcpp_result_gen = Rcpp::wrap(darts_likelihood_cpp(mu, delta, data, loglik, inc_eff_len, skp_eff_len));
    return rcpp_result_gen;
END_RCPP
}
// set_seed
void set_seed(unsigned int seed);
RcppExport SEXP Darts_set_seed(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    set_seed(seed);
    return R_NilValue;
END_RCPP
}
// darts_posterior_MCMC_sampler
NumericMatrix darts_posterior_MCMC_sampler(int N, double tau, List data, NumericVector init_val, double proposal_width, int burnin, int thinning, int random_state, double inc_eff_len, double skp_eff_len);
RcppExport SEXP Darts_darts_posterior_MCMC_sampler(SEXP NSEXP, SEXP tauSEXP, SEXP dataSEXP, SEXP init_valSEXP, SEXP proposal_widthSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP random_stateSEXP, SEXP inc_eff_lenSEXP, SEXP skp_eff_lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type init_val(init_valSEXP);
    Rcpp::traits::input_parameter< double >::type proposal_width(proposal_widthSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< int >::type random_state(random_stateSEXP);
    Rcpp::traits::input_parameter< double >::type inc_eff_len(inc_eff_lenSEXP);
    Rcpp::traits::input_parameter< double >::type skp_eff_len(skp_eff_lenSEXP);
    rcpp_result_gen = Rcpp::wrap(darts_posterior_MCMC_sampler(N, tau, data, init_val, proposal_width, burnin, thinning, random_state, inc_eff_len, skp_eff_len));
    return rcpp_result_gen;
END_RCPP
}
