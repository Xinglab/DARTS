#!/usr/bin/env python
# -*- coding: UTF-8 -*-


'''Deep-learning Augmented RNA-seq analysis of Transcript Splicing

This is the main entry for Darts BHT. 

Example:
	$ Darts_BHT [rmats_count|bayes_infer|darts_count] <options>

Author:
	Zijun Zhang <zj.z[at]ucla.edu>

Date:
	Feb. 20, 2019
'''


import os
import sys
import logging
import argparse as ap
import datetime

from Darts_BHT import config
from Darts_BHT.rmats_wrapper import add_rmats_parser, process_parsed_rmats_args

__author__ = 'Zijun Zhang'
__version__ = config.CURRENT_VERSION
__email__ = 'zj.z@ucla.edu'


def main():
	argparser = get_arg_parser()
	args = argparser.parse_args()
	
	subcommand = args.subcommand
	
	if subcommand == 'rmats_count':
		from Darts_BHT.rmatspipeline import run_pipe
		args = process_parsed_rmats_args(args)
		run_pipe(args)
		
	elif subcommand == 'bayes_infer':
		logger = setup_logger()
		from Darts_BHT import BHT_wrapper
		BHT_wrapper.parser( args )


def setup_logger():
	"""Set up the logger for the whole pipeline
	Args
		None
	Returns
		logger: logging object
	"""
	# setup logger
	logger = logging.getLogger('Darts_BHT')
	logger.setLevel(logging.INFO)
	# create file handler which logs even debug messages
	fh = logging.FileHandler('log.Darts_BHT.txt')
	fh.setLevel(logging.INFO)
	# create console handler with a higher log level
	ch = logging.StreamHandler()
	ch.setLevel(logging.DEBUG)
	# create formatter and add it to the handlers
	formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s -\n %(message)s')
	fh.setFormatter(formatter)
	ch.setFormatter(formatter)
	# add the handlers to the logger
	logger.addHandler(fh)
	logger.addHandler(ch)
	return logger


def restricted_float(x):
	x = float(x)
	if x < 0.01 or x > 0.99:
		raise ap.ArgumentTypeError("%r not in range [0.01, 0.99]"%(x,))
	return x

def get_arg_parser():
	description = "%(prog)s -- DARTS - Deep-learning Augmented RNA-seq analysis of Transcript Splicing"
	epilog = "For command line options of each sub-command, type: %(prog)s COMMAND -h"
	
	argparser = ap.ArgumentParser(description=description, epilog=epilog)
	argparser.add_argument("--version", action="version", version="%(prog)s "+__version__)
	
	subparsers = argparser.add_subparsers( dest="subcommand" )
	
	# rmats_count
	add_rmats_parser(subparsers)
	
	# inference
	add_infer_parser(subparsers)
	
	return argparser


def add_infer_parser( subparsers ):
	ag_infer = subparsers.add_parser("bayes_infer", help="Dart_BHT bayes_infer: perform Bayesian hypothesis testing inference")
	
	# input/output
	infer_input = ag_infer.add_mutually_exclusive_group()
	infer_input.add_argument('--rmats-count', dest='rmats_count_fp', type=str, 
		help='rMATS count file as input')
	infer_input.add_argument("--darts-count", dest="darts_count_fp", type=str, 
		help="Darts count file as input")
	
	ag_infer.add_argument("--od", dest="outdir", type=str, required=True,
		help="Output folder for BHT inference, results will be [event_type].darts_bht.[flat|info].txt")

	ag_infer.add_argument("--annot", dest="annot", type=str, required=False,
		help="Annotation file for the splicing events; currently accept 'fromGTF.eventType.txt' generated by rMATS.")

	ag_infer.add_argument("--prior", dest="prior", type=str, required=False,
		help="Filepath to prediction file; if not provided, will run flat-prior inference")

	ag_infer.add_argument("-c", dest="cutoff", type=restricted_float, required=False,
		default=0.05, 
		help="Cutoff of delta-PSI Posterior probability [0.01, 0.99]; default=0.05, i.e. 5 percent change")	

	ag_infer.add_argument("--rescale-method", dest="rescale_method", type=str, required=False,
		default="gaussian_mixture", choices=['gaussian_mixture', 'bias_estimates'],
		help='Rescaling method from prediction score to informative prior ')

	ag_infer.add_argument("--replicate-model", dest="replicate_model", type=str, required=False,
		default='none', choices=['unpaired', 'paired', 'pooled'],
		help='replicate model run mode [unpair/paired]')

	ag_infer.add_argument("--estimate-group-variance", dest="estim_gVar", action="store_true", required=False,
		default=False,
		help="Use prior to estimate within-group variance, default: FALSE")

	ag_infer.add_argument("--nthread", dest="nthread", type=int, required=False,
		default=4,
		help="no. of threads")	

	ag_infer.add_argument("-t", "--type", dest="event_type", type=str, required=False,
		default='SE', choices=['SE', 'A5SS', 'A3SS', 'RI'],
		help="Optional, default SE: specify the alternative splicing event type. SE: skipped exons, A3SS: alternative 3 splice sites, A5SS: alternative 5 splice sites, RI: retained introns")

	ag_infer.add_argument("--verbose", dest="verbose", type=int, required=False,
		default=0,
		help="verbose level (optional, 0:non-verbose, 1:summary, 2:every 200, default=0)")

	return

if __name__ == '__main__':
	try:
		main()
	except KeyboardInterrupt:
		sys.stderr.write("User interrupted; program terminated.")
		sys.exit(0)